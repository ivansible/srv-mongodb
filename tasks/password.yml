---
- name: wait for mongodb server start (check that port is open)
  # make sure that the only problem in the next step is password
  wait_for:
    port: "{{ mongodb_port }}"
    timeout: 20

- block:
    - name: try login as mongodb admin (can fail if password needs reset, will rescue)
      # note: this attempt can also fail if ssl mode is set to disable!
      mongodb_user:
        login_host: localhost
        login_port: "{{ mongodb_port |string }}"
        login_user: "{{ mongodb_admin_username }}"
        login_password: "{{ mongodb_admin_password }}"
        ssl: true
        # disable certificate check because localhost may not match common name
        ssl_cert_reqs: CERT_NONE
        database: admin
        # leave password unchanged
        name: "{{ mongodb_admin_username }}"
        password: "{{ mongodb_admin_password }}"
        roles: readWriteAnyDatabase,dbAdminAnyDatabase,userAdminAnyDatabase
      no_log: "{{ hide_secrets |bool }}"
      changed_when: false

  rescue:
    - name: temporarily disable mongodb authorization
      lineinfile:
        path: /etc/mongod.conf
        regexp: '^(\s+)authorization:'
        line: '\g<1>authorization: disabled'
        backrefs: true
      changed_when: true  # force handler
      notify:
        - restore mongodb authorization
        - restart mongodb service

    - name: restart mongodb with authorization disabled
      systemd:
        name: mongod
        state: restarted

    - name: reset mongodb administrator password
      mongodb_user:
        login_host: localhost
        login_port: "{{ mongodb_port |string }}"
        ssl: true
        # disable certificate check because localhost may not match common name
        ssl_cert_reqs: CERT_NONE
        database: admin
        name: "{{ mongodb_admin_username }}"
        password: "{{ mongodb_admin_password }}"
        roles: readWriteAnyDatabase,dbAdminAnyDatabase,userAdminAnyDatabase
      no_log: "{{ hide_secrets |bool }}"
...
